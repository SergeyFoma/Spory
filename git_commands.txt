Установка-----
Настройка---------

-----------Работа---------
git clone (addres git)
git init (инициализации репозитория. Оно означает, что Git начал отслеживать файлы проекта и будет записывать изменения в скрытую папку .git)

git status #даёт представление о текущем состоянии репозитория

git add file_name # Добавляем в индекс один файл
git add file_name_1 file_name_2 file_name_3 # Добавляем в индекс несколько файлов  
git add .  # Добавляем в индекс все изменённые файлы 

git help command_name #Чтобы получить подробную документацию о какой-то команде — вызывайте справку

git commit -m "Commit message"
git commit -a -m "Commit message" # если несколько разных файлов

git commit --amend -m "New commit message" #Другая частая ситуация: вы торопились и ошиблись в сообщении коммита. Можно ввести опцию --amend и перезаписать сообщение последнего коммита

git log  #просмотр журнала коммитов
git log --oneline   # Запрос на вывод истории коммитов в одну строку
git show abc12345  # Запрос на просмотр коммита с хешем abc12345 Если ввести git show без хеша, то выведется содержимое последнего коммита.

git diff # Смотрим разницу между последним коммитом и текущим состоянием репозитория
git diff file_name # Разница между последним коммитом и текущим состоянием файла 
git diff commit_hash # Разница между последним коммитом и коммитом с указанным хешем 
git diff --staged # Разница между последним коммитом и отслеживаемым состоянием репозитория 
            Команда git difftool работает по принципу команды git diff — сравнивает файлы и находит в них различия. Только git diff отображает результат в текстовом виде, а git difftool в графическом: команда запускает внешние программы с визуальными инструментами сравнения файлов. Если хотите попробовать — установите Beyond Compare, vimdiff, Meld или другое похожее приложение. После прочтите документацию по git difftool и попрактикуйтесь отображать данные.

git restore # отмена изменений
git restore file_name # Вернуть неотслеживаемый файл к состоянию последнего коммита 
git restore --staged # Вернуть все файлы из индекса к состоянию последнего коммита
git restore --staged file_name # Вернуть указанный файл из индекса к состоянию последнего коммита

git rm file_name # Удалить файл из индекса и рабочей директории
git rm --cached file_name # Удалить файл из индекса и оставить в папке на компьютере 

git reset #откат коммита
git reset --soft commit_hash # Откатываемся и переводим последующие коммиты в индекс
git reset --mixed commit_hash # Откатываемся и переводим последующие коммиты в неотслеживаемую зону
git reset --hard commit_hash # Откатываемся и удаляем все последующие коммиты
git reset HARD~

git branch branch_name #создание ветки branch_name
git branch -m old_branch_name new_branch_name #Ветку с неудачным названием можно переименовать:
git branch # Запрашиваем список всех доступных веток 
git checkout branch_name #переключение между ветками
git checkout -b branch_name #Также можно одной командой создать новую ветку и сразу в неё перейти
git switch branch_name #Команда git switch безопасней и больше подходит новичкам. Перед каждым переключением она автоматически проверяет рабочую директорию и не срабатывает, если переход на выбранную ветку может привести к потере данных.

Esc q Enter #выход из git log 

git merge #слияние репозиториев
git checkout main # Переключаемся на основную ветку, которая будет принимать изменения 
git merge branch_name # Сливаем изменения из второстепенной ветки в основную 

git push -u origin main # Команда для первой загрузки изменений в удалённый репозиторий: текущая ветка будет связана с веткой main в удалённом репозитории origin 

git branch -d existing_branch_name - Удалить ветку можно параметром branch с добавлением флага -d и указанием имени ветки. Если вы завершили работу над веткой и объединили её с основной, можно её удалить без потери истории. Однако, если выполнить команду удаления до слияния — в результате появится сообщение об ошибке. Этот защитный механизм предотвращает потерю доступа к файлам.
git branch -D existing_branch_name - Для принудительного удаления ветки используется флаг -D с заглавной буквой. В этом случае ветка будет удалена независимо от текущего статуса, без предупреждений.
git push origin --delete existing_branch_name - Вышеуказанные команды удаляют только локальную копию ветки. В удалённом репозитории она может сохраниться. Если хотите стереть удалённую ветку, выполните следующую команду:

git clean. Удаляет все неотслеживаемые файлы, независимо от того, были ли они недавно изменены или нет
git clean -n - Эта команда отобразит файлы, которые подлежат удалению.  
git clean -f -Подтвердить выполнение операции

---------Удаление коммитов----------------
Если коммит уже отправлен в общий репозиторий, безопаснее использовать `git revert`. 
Эта команда создает новый коммит, который отменяет изменения указанного коммита 
без перезаписи истории.
Чтобы отменить определенную фиксацию:
git revert <commit_hash>
git reset HEAD - Если нужно убрать все изменения из индекса, используется команда
git reset HEAD <filename> - отменяет индексацию конкретного файла
git restore -- . 
git pull origin 
git fetch --all
------------------------------------------------